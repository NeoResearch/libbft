// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bftevent.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_bftevent_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_bftevent_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3008000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3008000 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_bftevent_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_bftevent_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_bftevent_2eproto;
namespace bftevent {
class EventInform;
class EventInformDefaultTypeInternal;
extern EventInformDefaultTypeInternal _EventInform_default_instance_;
class EventReply;
class EventReplyDefaultTypeInternal;
extern EventReplyDefaultTypeInternal _EventReply_default_instance_;
}  // namespace bftevent
PROTOBUF_NAMESPACE_OPEN
template<> ::bftevent::EventInform* Arena::CreateMaybeMessage<::bftevent::EventInform>(Arena*);
template<> ::bftevent::EventReply* Arena::CreateMaybeMessage<::bftevent::EventReply>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace bftevent {

// ===================================================================

class EventInform :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bftevent.EventInform) */ {
 public:
  EventInform();
  virtual ~EventInform();

  EventInform(const EventInform& from);
  EventInform(EventInform&& from) noexcept
    : EventInform() {
    *this = ::std::move(from);
  }

  inline EventInform& operator=(const EventInform& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventInform& operator=(EventInform&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventInform& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventInform* internal_default_instance() {
    return reinterpret_cast<const EventInform*>(
               &_EventInform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(EventInform* other);
  friend void swap(EventInform& a, EventInform& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventInform* New() const final {
    return CreateMaybeMessage<EventInform>(nullptr);
  }

  EventInform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventInform>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventInform& from);
  void MergeFrom(const EventInform& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventInform* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bftevent.EventInform";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bftevent_2eproto);
    return ::descriptor_table_bftevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string event_args = 3;
  int event_args_size() const;
  void clear_event_args();
  static const int kEventArgsFieldNumber = 3;
  const std::string& event_args(int index) const;
  std::string* mutable_event_args(int index);
  void set_event_args(int index, const std::string& value);
  void set_event_args(int index, std::string&& value);
  void set_event_args(int index, const char* value);
  void set_event_args(int index, const char* value, size_t size);
  std::string* add_event_args();
  void add_event_args(const std::string& value);
  void add_event_args(std::string&& value);
  void add_event_args(const char* value);
  void add_event_args(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& event_args() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_event_args();

  // string event = 2;
  void clear_event();
  static const int kEventFieldNumber = 2;
  const std::string& event() const;
  void set_event(const std::string& value);
  void set_event(std::string&& value);
  void set_event(const char* value);
  void set_event(const char* value, size_t size);
  std::string* mutable_event();
  std::string* release_event();
  void set_allocated_event(std::string* event);

  // int32 from = 1;
  void clear_from();
  static const int kFromFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 from() const;
  void set_from(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:bftevent.EventInform)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> event_args_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr event_;
  ::PROTOBUF_NAMESPACE_ID::int32 from_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bftevent_2eproto;
};
// -------------------------------------------------------------------

class EventReply :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:bftevent.EventReply) */ {
 public:
  EventReply();
  virtual ~EventReply();

  EventReply(const EventReply& from);
  EventReply(EventReply&& from) noexcept
    : EventReply() {
    *this = ::std::move(from);
  }

  inline EventReply& operator=(const EventReply& from) {
    CopyFrom(from);
    return *this;
  }
  inline EventReply& operator=(EventReply&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const EventReply& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EventReply* internal_default_instance() {
    return reinterpret_cast<const EventReply*>(
               &_EventReply_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(EventReply* other);
  friend void swap(EventReply& a, EventReply& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EventReply* New() const final {
    return CreateMaybeMessage<EventReply>(nullptr);
  }

  EventReply* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<EventReply>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const EventReply& from);
  void MergeFrom(const EventReply& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  void SerializeWithCachedSizes(
      ::PROTOBUF_NAMESPACE_ID::io::CodedOutputStream* output) const final;
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(EventReply* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "bftevent.EventReply";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_bftevent_2eproto);
    return ::descriptor_table_bftevent_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 gotit = 1;
  void clear_gotit();
  static const int kGotitFieldNumber = 1;
  ::PROTOBUF_NAMESPACE_ID::int32 gotit() const;
  void set_gotit(::PROTOBUF_NAMESPACE_ID::int32 value);

  // @@protoc_insertion_point(class_scope:bftevent.EventReply)
 private:
  class HasBitSetters;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::int32 gotit_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_bftevent_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// EventInform

// int32 from = 1;
inline void EventInform::clear_from() {
  from_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventInform::from() const {
  // @@protoc_insertion_point(field_get:bftevent.EventInform.from)
  return from_;
}
inline void EventInform::set_from(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  from_ = value;
  // @@protoc_insertion_point(field_set:bftevent.EventInform.from)
}

// string event = 2;
inline void EventInform::clear_event() {
  event_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& EventInform::event() const {
  // @@protoc_insertion_point(field_get:bftevent.EventInform.event)
  return event_.GetNoArena();
}
inline void EventInform::set_event(const std::string& value) {
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:bftevent.EventInform.event)
}
inline void EventInform::set_event(std::string&& value) {
  
  event_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:bftevent.EventInform.event)
}
inline void EventInform::set_event(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:bftevent.EventInform.event)
}
inline void EventInform::set_event(const char* value, size_t size) {
  
  event_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:bftevent.EventInform.event)
}
inline std::string* EventInform::mutable_event() {
  
  // @@protoc_insertion_point(field_mutable:bftevent.EventInform.event)
  return event_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* EventInform::release_event() {
  // @@protoc_insertion_point(field_release:bftevent.EventInform.event)
  
  return event_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void EventInform::set_allocated_event(std::string* event) {
  if (event != nullptr) {
    
  } else {
    
  }
  event_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), event);
  // @@protoc_insertion_point(field_set_allocated:bftevent.EventInform.event)
}

// repeated string event_args = 3;
inline int EventInform::event_args_size() const {
  return event_args_.size();
}
inline void EventInform::clear_event_args() {
  event_args_.Clear();
}
inline const std::string& EventInform::event_args(int index) const {
  // @@protoc_insertion_point(field_get:bftevent.EventInform.event_args)
  return event_args_.Get(index);
}
inline std::string* EventInform::mutable_event_args(int index) {
  // @@protoc_insertion_point(field_mutable:bftevent.EventInform.event_args)
  return event_args_.Mutable(index);
}
inline void EventInform::set_event_args(int index, const std::string& value) {
  // @@protoc_insertion_point(field_set:bftevent.EventInform.event_args)
  event_args_.Mutable(index)->assign(value);
}
inline void EventInform::set_event_args(int index, std::string&& value) {
  // @@protoc_insertion_point(field_set:bftevent.EventInform.event_args)
  event_args_.Mutable(index)->assign(std::move(value));
}
inline void EventInform::set_event_args(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_args_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:bftevent.EventInform.event_args)
}
inline void EventInform::set_event_args(int index, const char* value, size_t size) {
  event_args_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:bftevent.EventInform.event_args)
}
inline std::string* EventInform::add_event_args() {
  // @@protoc_insertion_point(field_add_mutable:bftevent.EventInform.event_args)
  return event_args_.Add();
}
inline void EventInform::add_event_args(const std::string& value) {
  event_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:bftevent.EventInform.event_args)
}
inline void EventInform::add_event_args(std::string&& value) {
  event_args_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:bftevent.EventInform.event_args)
}
inline void EventInform::add_event_args(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  event_args_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:bftevent.EventInform.event_args)
}
inline void EventInform::add_event_args(const char* value, size_t size) {
  event_args_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:bftevent.EventInform.event_args)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
EventInform::event_args() const {
  // @@protoc_insertion_point(field_list:bftevent.EventInform.event_args)
  return event_args_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
EventInform::mutable_event_args() {
  // @@protoc_insertion_point(field_mutable_list:bftevent.EventInform.event_args)
  return &event_args_;
}

// -------------------------------------------------------------------

// EventReply

// int32 gotit = 1;
inline void EventReply::clear_gotit() {
  gotit_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 EventReply::gotit() const {
  // @@protoc_insertion_point(field_get:bftevent.EventReply.gotit)
  return gotit_;
}
inline void EventReply::set_gotit(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gotit_ = value;
  // @@protoc_insertion_point(field_set:bftevent.EventReply.gotit)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace bftevent

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_bftevent_2eproto
