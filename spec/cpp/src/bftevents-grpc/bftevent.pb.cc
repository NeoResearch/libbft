// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: bftevent.proto

#include "bftevent.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace bftevent {
PROTOBUF_CONSTEXPR EventInform::EventInform(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.event_args_)*/{}
  , /*decltype(_impl_.event_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.from_)*/0
  , /*decltype(_impl_.delay_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventInformDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventInformDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventInformDefaultTypeInternal() {}
  union {
    EventInform _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventInformDefaultTypeInternal _EventInform_default_instance_;
PROTOBUF_CONSTEXPR EventReply::EventReply(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.gotit_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct EventReplyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EventReplyDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~EventReplyDefaultTypeInternal() {}
  union {
    EventReply _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EventReplyDefaultTypeInternal _EventReply_default_instance_;
}  // namespace bftevent
static ::_pb::Metadata file_level_metadata_bftevent_2eproto[2];
static constexpr ::_pb::EnumDescriptor const** file_level_enum_descriptors_bftevent_2eproto = nullptr;
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_bftevent_2eproto = nullptr;

const uint32_t TableStruct_bftevent_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bftevent::EventInform, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bftevent::EventInform, _impl_.from_),
  PROTOBUF_FIELD_OFFSET(::bftevent::EventInform, _impl_.event_),
  PROTOBUF_FIELD_OFFSET(::bftevent::EventInform, _impl_.event_args_),
  PROTOBUF_FIELD_OFFSET(::bftevent::EventInform, _impl_.delay_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::bftevent::EventReply, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::bftevent::EventReply, _impl_.gotit_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::bftevent::EventInform)},
  { 10, -1, -1, sizeof(::bftevent::EventReply)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::bftevent::_EventInform_default_instance_._instance,
  &::bftevent::_EventReply_default_instance_._instance,
};

const char descriptor_table_protodef_bftevent_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\016bftevent.proto\022\010bftevent\"M\n\013EventInfor"
  "m\022\014\n\004from\030\001 \001(\005\022\r\n\005event\030\002 \001(\t\022\022\n\nevent_"
  "args\030\003 \003(\t\022\r\n\005delay\030\004 \001(\005\"\033\n\nEventReply\022"
  "\r\n\005gotit\030\001 \001(\0052H\n\010BFTEvent\022<\n\013informEven"
  "t\022\025.bftevent.EventInform\032\024.bftevent.Even"
  "tReply\"\000B,\n*com.github.com.neoresearch.l"
  "ibbft.bfteventb\006proto3"
  ;
static ::_pbi::once_flag descriptor_table_bftevent_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_bftevent_2eproto = {
    false, false, 262, descriptor_table_protodef_bftevent_2eproto,
    "bftevent.proto",
    &descriptor_table_bftevent_2eproto_once, nullptr, 0, 2,
    schemas, file_default_instances, TableStruct_bftevent_2eproto::offsets,
    file_level_metadata_bftevent_2eproto, file_level_enum_descriptors_bftevent_2eproto,
    file_level_service_descriptors_bftevent_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_bftevent_2eproto_getter() {
  return &descriptor_table_bftevent_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_bftevent_2eproto(&descriptor_table_bftevent_2eproto);
namespace bftevent {

// ===================================================================

class EventInform::_Internal {
 public:
};

EventInform::EventInform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bftevent.EventInform)
}
EventInform::EventInform(const EventInform& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventInform* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.event_args_){from._impl_.event_args_}
    , decltype(_impl_.event_){}
    , decltype(_impl_.from_){}
    , decltype(_impl_.delay_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_event().empty()) {
    _this->_impl_.event_.Set(from._internal_event(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.from_, &from._impl_.from_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.delay_) -
    reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.delay_));
  // @@protoc_insertion_point(copy_constructor:bftevent.EventInform)
}

inline void EventInform::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.event_args_){arena}
    , decltype(_impl_.event_){}
    , decltype(_impl_.from_){0}
    , decltype(_impl_.delay_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
  _impl_.event_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.event_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

EventInform::~EventInform() {
  // @@protoc_insertion_point(destructor:bftevent.EventInform)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventInform::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.event_args_.~RepeatedPtrField();
  _impl_.event_.Destroy();
}

void EventInform::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventInform::Clear() {
// @@protoc_insertion_point(message_clear_start:bftevent.EventInform)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.event_args_.Clear();
  _impl_.event_.ClearToEmpty();
  ::memset(&_impl_.from_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.delay_) -
      reinterpret_cast<char*>(&_impl_.from_)) + sizeof(_impl_.delay_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventInform::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 from = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.from_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string event = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_event();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "bftevent.EventInform.event"));
        } else
          goto handle_unusual;
        continue;
      // repeated string event_args = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_event_args();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "bftevent.EventInform.event_args"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      // int32 delay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.delay_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventInform::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftevent.EventInform)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_from(), target);
  }

  // string event = 2;
  if (!this->_internal_event().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_event().data(), static_cast<int>(this->_internal_event().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bftevent.EventInform.event");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_event(), target);
  }

  // repeated string event_args = 3;
  for (int i = 0, n = this->_internal_event_args_size(); i < n; i++) {
    const auto& s = this->_internal_event_args(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "bftevent.EventInform.event_args");
    target = stream->WriteString(3, s, target);
  }

  // int32 delay = 4;
  if (this->_internal_delay() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(4, this->_internal_delay(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bftevent.EventInform)
  return target;
}

size_t EventInform::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bftevent.EventInform)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string event_args = 3;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.event_args_.size());
  for (int i = 0, n = _impl_.event_args_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.event_args_.Get(i));
  }

  // string event = 2;
  if (!this->_internal_event().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_event());
  }

  // int32 from = 1;
  if (this->_internal_from() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_from());
  }

  // int32 delay = 4;
  if (this->_internal_delay() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_delay());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventInform::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventInform::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventInform::GetClassData() const { return &_class_data_; }


void EventInform::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventInform*>(&to_msg);
  auto& from = static_cast<const EventInform&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bftevent.EventInform)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.event_args_.MergeFrom(from._impl_.event_args_);
  if (!from._internal_event().empty()) {
    _this->_internal_set_event(from._internal_event());
  }
  if (from._internal_from() != 0) {
    _this->_internal_set_from(from._internal_from());
  }
  if (from._internal_delay() != 0) {
    _this->_internal_set_delay(from._internal_delay());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventInform::CopyFrom(const EventInform& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bftevent.EventInform)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventInform::IsInitialized() const {
  return true;
}

void EventInform::InternalSwap(EventInform* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.event_args_.InternalSwap(&other->_impl_.event_args_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.event_, lhs_arena,
      &other->_impl_.event_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(EventInform, _impl_.delay_)
      + sizeof(EventInform::_impl_.delay_)
      - PROTOBUF_FIELD_OFFSET(EventInform, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::PROTOBUF_NAMESPACE_ID::Metadata EventInform::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bftevent_2eproto_getter, &descriptor_table_bftevent_2eproto_once,
      file_level_metadata_bftevent_2eproto[0]);
}

// ===================================================================

class EventReply::_Internal {
 public:
};

EventReply::EventReply(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:bftevent.EventReply)
}
EventReply::EventReply(const EventReply& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  EventReply* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.gotit_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.gotit_ = from._impl_.gotit_;
  // @@protoc_insertion_point(copy_constructor:bftevent.EventReply)
}

inline void EventReply::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.gotit_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

EventReply::~EventReply() {
  // @@protoc_insertion_point(destructor:bftevent.EventReply)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void EventReply::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void EventReply::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void EventReply::Clear() {
// @@protoc_insertion_point(message_clear_start:bftevent.EventReply)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.gotit_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* EventReply::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 gotit = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.gotit_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* EventReply::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:bftevent.EventReply)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 gotit = 1;
  if (this->_internal_gotit() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_gotit(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:bftevent.EventReply)
  return target;
}

size_t EventReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:bftevent.EventReply)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 gotit = 1;
  if (this->_internal_gotit() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_gotit());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData EventReply::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    EventReply::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*EventReply::GetClassData() const { return &_class_data_; }


void EventReply::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<EventReply*>(&to_msg);
  auto& from = static_cast<const EventReply&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:bftevent.EventReply)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_gotit() != 0) {
    _this->_internal_set_gotit(from._internal_gotit());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void EventReply::CopyFrom(const EventReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:bftevent.EventReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EventReply::IsInitialized() const {
  return true;
}

void EventReply::InternalSwap(EventReply* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.gotit_, other->_impl_.gotit_);
}

::PROTOBUF_NAMESPACE_ID::Metadata EventReply::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_bftevent_2eproto_getter, &descriptor_table_bftevent_2eproto_once,
      file_level_metadata_bftevent_2eproto[1]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace bftevent
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::bftevent::EventInform*
Arena::CreateMaybeMessage< ::bftevent::EventInform >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bftevent::EventInform >(arena);
}
template<> PROTOBUF_NOINLINE ::bftevent::EventReply*
Arena::CreateMaybeMessage< ::bftevent::EventReply >(Arena* arena) {
  return Arena::CreateMessageInternal< ::bftevent::EventReply >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
