// Code generated by protoc-gen-go. DO NOT EDIT.
// source: bftevent.proto

package bftevent

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The request message containing requested numbers
type EventInform struct {
	From                 int32    `protobuf:"varint,1,opt,name=from,proto3" json:"from,omitempty"`
	Event                string   `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
	EventArgs            []string `protobuf:"bytes,3,rep,name=event_args,json=eventArgs,proto3" json:"event_args,omitempty"`
	Delay                int32    `protobuf:"varint,4,opt,name=delay,proto3" json:"delay,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventInform) Reset()         { *m = EventInform{} }
func (m *EventInform) String() string { return proto.CompactTextString(m) }
func (*EventInform) ProtoMessage()    {}
func (*EventInform) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7b16aa215e9c9cc, []int{0}
}

func (m *EventInform) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventInform.Unmarshal(m, b)
}
func (m *EventInform) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventInform.Marshal(b, m, deterministic)
}
func (m *EventInform) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventInform.Merge(m, src)
}
func (m *EventInform) XXX_Size() int {
	return xxx_messageInfo_EventInform.Size(m)
}
func (m *EventInform) XXX_DiscardUnknown() {
	xxx_messageInfo_EventInform.DiscardUnknown(m)
}

var xxx_messageInfo_EventInform proto.InternalMessageInfo

func (m *EventInform) GetFrom() int32 {
	if m != nil {
		return m.From
	}
	return 0
}

func (m *EventInform) GetEvent() string {
	if m != nil {
		return m.Event
	}
	return ""
}

func (m *EventInform) GetEventArgs() []string {
	if m != nil {
		return m.EventArgs
	}
	return nil
}

func (m *EventInform) GetDelay() int32 {
	if m != nil {
		return m.Delay
	}
	return 0
}

// The response message containing response
type EventReply struct {
	Gotit                int32    `protobuf:"varint,1,opt,name=gotit,proto3" json:"gotit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EventReply) Reset()         { *m = EventReply{} }
func (m *EventReply) String() string { return proto.CompactTextString(m) }
func (*EventReply) ProtoMessage()    {}
func (*EventReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_a7b16aa215e9c9cc, []int{1}
}

func (m *EventReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_EventReply.Unmarshal(m, b)
}
func (m *EventReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_EventReply.Marshal(b, m, deterministic)
}
func (m *EventReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EventReply.Merge(m, src)
}
func (m *EventReply) XXX_Size() int {
	return xxx_messageInfo_EventReply.Size(m)
}
func (m *EventReply) XXX_DiscardUnknown() {
	xxx_messageInfo_EventReply.DiscardUnknown(m)
}

var xxx_messageInfo_EventReply proto.InternalMessageInfo

func (m *EventReply) GetGotit() int32 {
	if m != nil {
		return m.Gotit
	}
	return 0
}

func init() {
	proto.RegisterType((*EventInform)(nil), "bftevent.EventInform")
	proto.RegisterType((*EventReply)(nil), "bftevent.EventReply")
}

func init() { proto.RegisterFile("bftevent.proto", fileDescriptor_a7b16aa215e9c9cc) }

var fileDescriptor_a7b16aa215e9c9cc = []byte{
	// 197 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4b, 0x4a, 0x2b, 0x49,
	0x2d, 0x4b, 0xcd, 0x2b, 0xd1, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0xe2, 0x80, 0xf1, 0x95, 0x72,
	0xb8, 0xb8, 0x5d, 0x41, 0x0c, 0xcf, 0xbc, 0xb4, 0xfc, 0xa2, 0x5c, 0x21, 0x21, 0x2e, 0x96, 0xb4,
	0xa2, 0xfc, 0x5c, 0x09, 0x46, 0x05, 0x46, 0x0d, 0xd6, 0x20, 0x30, 0x5b, 0x48, 0x84, 0x8b, 0x15,
	0xac, 0x56, 0x82, 0x49, 0x81, 0x51, 0x83, 0x33, 0x08, 0xc2, 0x11, 0x92, 0xe5, 0xe2, 0x02, 0x33,
	0xe2, 0x13, 0x8b, 0xd2, 0x8b, 0x25, 0x98, 0x15, 0x98, 0x35, 0x38, 0x83, 0x38, 0xc1, 0x22, 0x8e,
	0x45, 0xe9, 0xc5, 0x20, 0x4d, 0x29, 0xa9, 0x39, 0x89, 0x95, 0x12, 0x2c, 0x60, 0x93, 0x20, 0x1c,
	0x25, 0x25, 0x2e, 0x2e, 0xb0, 0x6d, 0x41, 0xa9, 0x05, 0x39, 0x95, 0x20, 0x35, 0xe9, 0xf9, 0x25,
	0x99, 0x25, 0x50, 0xdb, 0x20, 0x1c, 0x23, 0x0f, 0x2e, 0x0e, 0x27, 0xb7, 0x10, 0xb0, 0x32, 0x21,
	0x1b, 0x2e, 0xee, 0x4c, 0xb0, 0xc3, 0x20, 0x5c, 0x51, 0x3d, 0xb8, 0x3f, 0x90, 0x1c, 0x2d, 0x25,
	0x82, 0x26, 0x0c, 0x36, 0x5d, 0x89, 0xc1, 0x89, 0x93, 0x8b, 0x3d, 0xb5, 0x42, 0x2f, 0xbd, 0xa8,
	0x20, 0x39, 0x89, 0x0d, 0xec, 0x6f, 0x63, 0x40, 0x00, 0x00, 0x00, 0xff, 0xff, 0x96, 0x2b, 0x5b,
	0x2d, 0x09, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// BFTEventClient is the client API for BFTEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type BFTEventClient interface {
	// Function invoked to send the request
	InformEvent(ctx context.Context, in *EventInform, opts ...grpc.CallOption) (*EventReply, error)
}

type bFTEventClient struct {
	cc *grpc.ClientConn
}

func NewBFTEventClient(cc *grpc.ClientConn) BFTEventClient {
	return &bFTEventClient{cc}
}

func (c *bFTEventClient) InformEvent(ctx context.Context, in *EventInform, opts ...grpc.CallOption) (*EventReply, error) {
	out := new(EventReply)
	err := c.cc.Invoke(ctx, "/bftevent.BFTEvent/informEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// BFTEventServer is the server API for BFTEvent service.
type BFTEventServer interface {
	// Function invoked to send the request
	InformEvent(context.Context, *EventInform) (*EventReply, error)
}

// UnimplementedBFTEventServer can be embedded to have forward compatible implementations.
type UnimplementedBFTEventServer struct {
}

func (*UnimplementedBFTEventServer) InformEvent(ctx context.Context, req *EventInform) (*EventReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InformEvent not implemented")
}

func RegisterBFTEventServer(s *grpc.Server, srv BFTEventServer) {
	s.RegisterService(&_BFTEvent_serviceDesc, srv)
}

func _BFTEvent_InformEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EventInform)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BFTEventServer).InformEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/bftevent.BFTEvent/InformEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BFTEventServer).InformEvent(ctx, req.(*EventInform))
	}
	return interceptor(ctx, in, info, handler)
}

var _BFTEvent_serviceDesc = grpc.ServiceDesc{
	ServiceName: "bftevent.BFTEvent",
	HandlerType: (*BFTEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "informEvent",
			Handler:    _BFTEvent_InformEvent_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "bftevent.proto",
}
